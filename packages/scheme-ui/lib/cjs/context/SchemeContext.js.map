{"version":3,"sources":["../../../src/context/SchemeContext.tsx"],"names":["SCHEMES","PREFERS_COLOR_SCHEME","STORAGE_KEYS","getSchemeSettings","Promise","all","localStorage","getItem","useLightDarkScheme","systemScheme","setSystemScheme","scheme","setScheme","auto","setAuto","handleSetAuto","isAuto","setItem","handleSetScheme","getUserPreference","state","userScheme","updateSchemes","event","newColorScheme","matches","window","matchMedia","addEventListener","removeEventListener","SchemeContext","React","createContext","colors","SchemeProvider","theme","colorSchemes","children","colorScheme","Object","keys","useSchemeContext"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\n\ntype ColorsProps = {\n  [index: string]: string;\n};\n\ntype SchemeProps = {\n  [index: string]: ColorsProps;\n};\n\nconst SCHEMES = ['light', 'dark'] as const;\ntype SchemeType = typeof SCHEMES[number];\ntype StateType = 'auto' | 'user';\n\nconst PREFERS_COLOR_SCHEME = '(prefers-color-scheme: dark)';\n\nenum STORAGE_KEYS {\n  mode = 'settings:dark:mode',\n  value = 'settings:dark:value',\n}\n\ntype SchemeSettingsRes = [StateType | null, SchemeType | null];\nexport const getSchemeSettings = async (): Promise<SchemeSettingsRes> =>\n  (await Promise.all([\n    localStorage.getItem(STORAGE_KEYS['mode']),\n    localStorage.getItem(STORAGE_KEYS['value']),\n  ])) as SchemeSettingsRes;\n\nexport type ColorSchemeProps = {\n  scheme: SchemeType; // The current app scheme\n  userScheme: SchemeType; // The user's chosen scheme (may be different if 'auto' is true)\n  setScheme: (newScheme: SchemeType) => void;\n  auto: boolean;\n  setAuto: (newAuto: boolean) => void;\n};\n\n// The useLightDarkScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nfunction useLightDarkScheme(): ColorSchemeProps {\n  const [systemScheme, setSystemScheme] = useState<SchemeType>('light');\n  const [scheme, setScheme] = useState<SchemeType>('light');\n  const [auto, setAuto] = useState(true);\n\n  // Set whether we should be using the device scheme or user's scheme\n  const handleSetAuto = (isAuto: boolean) => {\n    if (isAuto) {\n      void localStorage.setItem(STORAGE_KEYS['mode'], 'auto');\n    } else {\n      void localStorage.setItem(STORAGE_KEYS['mode'], 'user');\n    }\n\n    setAuto(isAuto);\n  };\n\n  // Set the current scheme\n  const handleSetScheme = (scheme: SchemeType) => {\n    void localStorage.setItem(STORAGE_KEYS['value'], scheme);\n    setScheme(scheme);\n  };\n\n  // Get initial stored user preference\n  const getUserPreference = async () => {\n    const [state, userScheme] = await getSchemeSettings();\n\n    if (state === 'user') {\n      if (userScheme && userScheme !== scheme) setScheme(userScheme);\n      setAuto(false);\n    }\n  };\n\n  useEffect(() => {\n    const updateSchemes = (event: { matches: boolean }) => {\n      const newColorScheme = event.matches ? 'dark' : 'light';\n      setSystemScheme(newColorScheme);\n    };\n\n    void getUserPreference();\n\n    window.matchMedia(PREFERS_COLOR_SCHEME).addEventListener('change', updateSchemes);\n\n    const scheme = window.matchMedia(PREFERS_COLOR_SCHEME) ? 'dark' : 'light';\n    setSystemScheme(scheme);\n\n    return () => {\n      window.matchMedia(PREFERS_COLOR_SCHEME).removeEventListener('change', updateSchemes);\n    };\n  }, []);\n\n  return {\n    scheme: auto ? systemScheme : scheme,\n    userScheme: scheme,\n    auto,\n    setScheme: handleSetScheme,\n    setAuto: handleSetAuto,\n  };\n}\n\ntype SchemeContextProps = ColorSchemeProps & { colors: ColorsProps };\n\nconst SchemeContext = React.createContext<SchemeContextProps>({\n  colors: null,\n  scheme: 'light',\n});\n\nexport type SchemeProviderProps = {\n  colorSchemes?: SchemeProps;\n  theme?: { [index: string]: any };\n  scheme?: string;\n  children: React.ReactNode;\n};\n\nexport function SchemeProvider({ theme = {}, scheme = '', colorSchemes = {}, children }: SchemeProviderProps) {\n  // Get current light / dark scheme\n  const colorScheme = useLightDarkScheme();\n\n  // Use passed scheme if it exists, otherwise use light / dark, otherwise use first available scheme\n  const colors = colorSchemes[scheme] || colorSchemes[colorScheme.scheme] || colorSchemes[Object.keys(colorSchemes)[0]];\n\n  return (\n    <SchemeContext.Provider value={{ ...colorScheme, colors }}>\n      <ThemeProvider theme={{ ...theme, colors }}>{children}</ThemeProvider>\n    </SchemeContext.Provider>\n  );\n}\n\nexport const useSchemeContext = (): SchemeContextProps => useContext(SchemeContext);\n"],"file":"SchemeContext.js"}