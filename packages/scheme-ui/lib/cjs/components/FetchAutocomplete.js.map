{"version":3,"sources":["../../../src/components/FetchAutocomplete.tsx"],"names":["FetchAutocomplete","props","onSelect","request","formatResponse","debounce","autocompleteItems","setAutocompleteItems","debouncedValue","value","search","val","res","newItems"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAkB;AAC1C,MAAQC,QAAR,GAA8DD,KAA9D,CAAQC,QAAR;AAAA,MAAkBC,OAAlB,GAA8DF,KAA9D,CAAkBE,OAAlB;AAAA,MAA2BC,cAA3B,GAA8DH,KAA9D,CAA2BG,cAA3B;AAAA,wBAA8DH,KAA9D,CAA2CI,QAA3C;AAAA,MAA2CA,QAA3C,gCAAsD,GAAtD;;AAEA,kBAAkD,qBAAS,EAAT,CAAlD;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,oBAA1B;;AAEA,MAAMC,cAAc,GAAG,6BAAYP,KAAK,CAACQ,KAAlB,EAAyBJ,QAAzB,CAAvB;;AAEA,MAAMK,MAAM;AAAA,uEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKR,OAAO,CAACQ,GAAD,CADZ;;AAAA;AACPC,cAAAA,GADO;;AAGb,kBAAIA,GAAJ,EAAS;AACDC,gBAAAA,QADC,GACUT,cAAc,CAACQ,GAAD,CADxB;AAEPL,gBAAAA,oBAAoB,CAACM,QAAD,CAApB;AACD;;AANY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAANH,MAAM;AAAA;AAAA;AAAA,KAAZ;;AASA,wBAAU,YAAM;AACdA,IAAAA,MAAM,CAACF,cAAD,CAAN;AACD,GAFD,EAEG,CAACA,cAAD,CAFH;AAIA,sBAAO,gCAAC,wBAAD,eAAkBP,KAAlB;AAAyB,IAAA,KAAK,EAAEK,iBAAhC;AAAmD,IAAA,QAAQ,EAAEJ;AAA7D,KAAP;AACD,CArBD;;eAuBeF,iB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useDebounce from '../hooks/useDebounce';\nimport Autocomplete, { AutocompleteProps, Item } from './Autocomplete';\n\ntype Props = AutocompleteProps & {\n  onSelect: (item: Item) => void;\n  debounce?: number;\n  formatResponse?: (data: any) => any[];\n  request: (value: string) => Promise<any>;\n};\n\nconst FetchAutocomplete = (props: Props) => {\n  const { onSelect, request, formatResponse, debounce = 500 } = props;\n\n  const [autocompleteItems, setAutocompleteItems] = useState([]);\n\n  const debouncedValue = useDebounce(props.value, debounce);\n\n  const search = async (val: string) => {\n    const res = await request(val);\n\n    if (res) {\n      const newItems = formatResponse(res);\n      setAutocompleteItems(newItems);\n    }\n  };\n\n  useEffect(() => {\n    search(debouncedValue);\n  }, [debouncedValue]);\n\n  return <Autocomplete {...props} items={autocompleteItems} onSelect={onSelect} />;\n};\n\nexport default FetchAutocomplete;\n"],"file":"FetchAutocomplete.js"}