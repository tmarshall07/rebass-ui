{"version":3,"sources":["../../../src/hooks/useClickOutside.ts"],"names":["useOutsideClick","ref","callback","handleClick","e","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAA8BC,QAA9B,EAAoE;AAC1F,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAmB;AACrC,QAAIH,GAAG,CAACI,OAAJ,IAAe,CAACJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,CAAC,CAACG,MAAvB,CAApB,EAAoD;AAClDL,MAAAA,QAAQ,CAACE,CAAD,CAAR;AACD;AACF,GAJD;;AAMA,wBAAU,YAAM;AACdI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,WAAnC;AACA,WAAO,YAAM;AACX;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCP,WAAtC;AACD,KAHD;AAID,GAND;AAOD,CAdD;;eAgBeH,e","sourcesContent":["import { RefObject, useEffect } from 'react';\n\n/**\n * A react hook that fires the callback when clicking outside of the referenced element\n *\n * @param {Object} ref - react reference object with a `current` property\n * @param {Function} callback - a callback function that fires when clicking outside the element\n */\nconst useOutsideClick = (ref: RefObject<HTMLElement>, callback: (e: MouseEvent) => void) => {\n  const handleClick = (e: MouseEvent) => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback(e);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return () => {\n      // Cleanup\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};\n\nexport default useOutsideClick;\n"],"file":"useClickOutside.js"}