{"version":3,"sources":["../../../src/hooks/useDebounce.ts"],"names":["useDebounce","value","delay","debouncedValue","setDebouncedValue","debouncer","Debouncer","current","setValue"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;AACA,SAASA,WAAT,CAAqBC,KAArB,EAAyC;AAAA,MAAbC,KAAa,uEAAL,GAAK;;AACvC;AACA,kBAA4C,qBAASD,KAAT,CAA5C;AAAA;AAAA,MAAOE,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,MAAMC,SAAS,GAAG,mBAAO,IAAIC,qBAAJ,CAAcL,KAAd,EAAqBC,KAArB,CAAP,CAAlB;AAEA,wBACE,YAAM;AACJG,IAAAA,SAAS,CAACE,OAAV,CAAkBC,QAAlB,CAA2BP,KAA3B,EAAkC,YAAM;AACtCG,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFD;AAGD,GALH,EAME,CAACA,KAAD,EAAQC,KAAR,CANF,CAMkB;AANlB;AASA,SAAOC,cAAP;AACD;;eAEcH,W","sourcesContent":["import { useState, useRef, useEffect } from 'react';\n\nimport Debouncer from '../class/debouncer';\n\n// Hook\nfunction useDebounce(value, delay = 500) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  const debouncer = useRef(new Debouncer(value, delay));\n\n  useEffect(\n    () => {\n      debouncer.current.setValue(value, () => {\n        setDebouncedValue(value);\n      });\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n"],"file":"useDebounce.js"}