{"version":3,"sources":["../../../src/components/Autocomplete.tsx"],"names":["React","useEffect","useRef","useState","useClickOutside","Box","Input","updateScroll","el","index","parent","children","child","childOffsetTop","offsetTop","parentScrollTop","scrollTop","parentHeight","offsetHeight","childHeight","scrollToY","scrollTo","Autocomplete","props","value","placeholder","items","menuProps","inputProps","onChange","onSelect","keyExtractor","renderItem","menuRef","menuVisible","setMenuVisible","focusedIndex","setFocusedIndex","current","containerRef","handleSelect","item","handleFocus","e","onFocus","handleKeyDown","newFocusedIndex","key","preventDefault","length","position","bg","maxHeight","width","overflow","zIndex","marginTop","borderRadius","boxShadow","borderStyle","borderColor","borderWidth","sx","map","i"],"mappings":"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","sourcesContent":["import { InputProps } from '@rebass/forms';\nimport React, { ChangeEvent, KeyboardEvent, ReactChild, useEffect, useRef, useState } from 'react';\nimport useClickOutside from '../hooks/useClickOutside';\nimport Box, { BoxProps } from './Box';\nimport Input from './Input';\n\nexport type Item = { [index: string]: any };\n\nexport type AutocompleteProps = {\n  value: string;\n  items?: Item[];\n  placeholder?: string;\n  menuProps?: BoxProps;\n  inputProps?: InputProps;\n  keyExtractor: (item: Item) => string | number;\n  renderItem: (item: Item, hasFocus: boolean) => ReactChild;\n  onChange?: (e: ChangeEvent) => void;\n  onSelect?: (item: Item) => void;\n};\n\n/**\n * Update the scroll to show more items as the user arrows up or down\n *\n * @param {HTMLElement} el\n * @param {number} index\n */\nconst updateScroll = (el: HTMLElement, index: number): void => {\n  const parent = el;\n  if (parent?.children) {\n    const child = parent.children[index] as HTMLElement;\n    if (child) {\n      const childOffsetTop = child.offsetTop;\n      const parentScrollTop = parent.scrollTop;\n      const parentHeight = parent.offsetHeight;\n      const childHeight = child.offsetHeight;\n\n      if (childOffsetTop + childHeight > parentHeight + parentScrollTop) {\n        const scrollToY = childOffsetTop + childHeight - parentHeight;\n        parent.scrollTo(0, scrollToY);\n      } else if (childOffsetTop < parentScrollTop) {\n        parent.scrollTo(0, childOffsetTop);\n      }\n    }\n  }\n};\n\nconst Autocomplete = (props: AutocompleteProps): JSX.Element => {\n  const {\n    value,\n    placeholder,\n    items = [],\n    menuProps = {},\n    inputProps = {},\n    onChange,\n    onSelect,\n    keyExtractor,\n    renderItem,\n  } = props;\n\n  const menuRef = useRef<HTMLElement>();\n\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Handle using arrows to scroll up and down\n  useEffect(() => {\n    updateScroll(menuRef.current, focusedIndex);\n  }, [focusedIndex]);\n\n  const containerRef = useRef();\n\n  useClickOutside(containerRef, () => setMenuVisible(false));\n\n  const handleSelect = (item): void => {\n    setMenuVisible(false);\n    onSelect(item);\n  };\n\n  const handleFocus = (e): void => {\n    setMenuVisible(true);\n    inputProps.onFocus?.(e);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent): void => {\n    let newFocusedIndex = focusedIndex;\n    switch (e.key) {\n      case 'ArrowUp': // Up\n        e.preventDefault();\n        if (!(focusedIndex - 1 < 0)) newFocusedIndex -= 1;\n        break;\n      case 'ArrowDown': // Down\n        e.preventDefault();\n        if (!(focusedIndex + 1 >= items.length)) newFocusedIndex += 1;\n        break;\n      case 'Enter': // Enter\n        e.preventDefault();\n        handleSelect(items[focusedIndex]);\n        break;\n      default:\n        break;\n    }\n\n    setFocusedIndex(newFocusedIndex);\n  };\n\n  return (\n    <Box sx={{ position: 'relative' }} ref={containerRef}>\n      <Input\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        onFocus={handleFocus}\n        onKeyDown={handleKeyDown}\n        {...inputProps}\n      />\n      {menuVisible && !!items.length && (\n        <Box\n          ref={menuRef}\n          {...menuProps}\n          sx={{\n            position: 'absolute',\n            bg: 'bg-2',\n            maxHeight: 300,\n            width: '100%',\n            overflow: 'auto',\n            zIndex: 2,\n            marginTop: 1,\n            borderRadius: 5,\n            boxShadow: 'large',\n            borderStyle: 'solid',\n            borderColor: 'gray5',\n            borderWidth: 1,\n            ...(menuProps?.sx || {}),\n          }}\n        >\n          {items.map((item, i) => (\n            <Box onClick={() => handleSelect(item)} key={keyExtractor(item)}>\n              {renderItem(item, i === focusedIndex)}\n            </Box>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Autocomplete;\n"],"file":"Autocomplete.js"}