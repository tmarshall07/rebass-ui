{"version":3,"file":"SchemeContext.js","names":["React","useContext","useEffect","useState","ThemeProvider","SCHEMES","PREFERS_COLOR_SCHEME","STORAGE_KEYS","getSchemeSettings","Promise","all","localStorage","getItem","useLightDarkScheme","systemScheme","setSystemScheme","scheme","setScheme","auto","setAuto","handleSetAuto","isAuto","setItem","handleSetScheme","getUserPreference","state","userScheme","updateSchemes","event","newColorScheme","matches","window","matchMedia","addEventListener","removeEventListener","SchemeContext","createContext","colors","SchemeProvider","theme","colorSchemes","children","colorScheme","Object","keys","createElement","Provider","value","useSchemeContext"],"sources":["../../../src/context/SchemeContext.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\n\ntype ColorsProps = {\n  [index: string]: string;\n};\n\ntype SchemeProps = {\n  [index: string]: ColorsProps;\n};\n\nconst SCHEMES = ['light', 'dark'] as const;\ntype SchemeType = typeof SCHEMES[number];\ntype StateType = 'auto' | 'user';\n\nconst PREFERS_COLOR_SCHEME = '(prefers-color-scheme: dark)';\n\nenum STORAGE_KEYS {\n  mode = 'settings:dark:mode',\n  value = 'settings:dark:value',\n}\n\ntype SchemeSettingsRes = [StateType | null, SchemeType | null];\nexport const getSchemeSettings = async (): Promise<SchemeSettingsRes> =>\n  (await Promise.all([\n    localStorage.getItem(STORAGE_KEYS['mode']),\n    localStorage.getItem(STORAGE_KEYS['value']),\n  ])) as SchemeSettingsRes;\n\nexport type ColorSchemeProps = {\n  scheme: SchemeType; // The current app scheme\n  userScheme: SchemeType; // The user's chosen scheme (may be different if 'auto' is true)\n  setScheme: (newScheme: SchemeType) => void;\n  auto: boolean;\n  setAuto: (newAuto: boolean) => void;\n};\n\n// The useLightDarkScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nfunction useLightDarkScheme(): ColorSchemeProps {\n  const [systemScheme, setSystemScheme] = useState<SchemeType>('light');\n  const [scheme, setScheme] = useState<SchemeType>('light');\n  const [auto, setAuto] = useState(true);\n\n  // Set whether we should be using the device scheme or user's scheme\n  const handleSetAuto = (isAuto: boolean) => {\n    if (isAuto) {\n      void localStorage.setItem(STORAGE_KEYS['mode'], 'auto');\n    } else {\n      void localStorage.setItem(STORAGE_KEYS['mode'], 'user');\n    }\n\n    setAuto(isAuto);\n  };\n\n  // Set the current scheme\n  const handleSetScheme = (scheme: SchemeType) => {\n    void localStorage.setItem(STORAGE_KEYS['value'], scheme);\n    setScheme(scheme);\n  };\n\n  // Get initial stored user preference\n  const getUserPreference = async () => {\n    const [state, userScheme] = await getSchemeSettings();\n\n    if (state === 'user') {\n      if (userScheme && userScheme !== scheme) setScheme(userScheme);\n      setAuto(false);\n    }\n  };\n\n  useEffect(() => {\n    const updateSchemes = (event: { matches: boolean }) => {\n      const newColorScheme = event.matches ? 'dark' : 'light';\n      setSystemScheme(newColorScheme);\n    };\n\n    void getUserPreference();\n\n    window.matchMedia(PREFERS_COLOR_SCHEME).addEventListener('change', updateSchemes);\n\n    const scheme = window.matchMedia(PREFERS_COLOR_SCHEME) ? 'dark' : 'light';\n    setSystemScheme(scheme);\n\n    return () => {\n      window.matchMedia(PREFERS_COLOR_SCHEME).removeEventListener('change', updateSchemes);\n    };\n  }, []);\n\n  return {\n    scheme: auto ? systemScheme : scheme,\n    userScheme: scheme,\n    auto,\n    setScheme: handleSetScheme,\n    setAuto: handleSetAuto,\n  };\n}\n\ntype SchemeContextProps = ColorSchemeProps & { colors: ColorsProps };\n\nconst SchemeContext = React.createContext<SchemeContextProps>({\n  colors: null,\n  scheme: 'light',\n});\n\nexport type SchemeProviderProps = {\n  colorSchemes?: SchemeProps;\n  theme?: { [index: string]: any };\n  scheme?: string;\n  children: React.ReactNode;\n};\n\nexport function SchemeProvider({ theme = {}, scheme = '', colorSchemes = {}, children }: SchemeProviderProps) {\n  // Get current light / dark scheme\n  const colorScheme = useLightDarkScheme();\n\n  // Use passed scheme if it exists, otherwise use light / dark, otherwise use first available scheme\n  const colors = colorSchemes[scheme] || colorSchemes[colorScheme.scheme] || colorSchemes[Object.keys(colorSchemes)[0]];\n\n  return (\n    <SchemeContext.Provider value={{ ...colorScheme, colors }}>\n      <ThemeProvider theme={{ ...theme, colors }}>{children}</ThemeProvider>\n    </SchemeContext.Provider>\n  );\n}\n\nexport const useSchemeContext = (): SchemeContextProps => useContext(SchemeContext);\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,aAAa,QAAQ,mBAAmB;AAUjD,MAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,MAAM,CAAU;AAI1C,MAAMC,oBAAoB,GAAG,8BAA8B;AAAC,IAEvDC,YAAY,0BAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA,EAAZA,YAAY;AAMjB,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAC9B,MAAMC,OAAO,CAACC,GAAG,CAAC,CACjBC,YAAY,CAACC,OAAO,CAACL,YAAY,CAAC,MAAM,CAAC,CAAC,EAC1CI,YAAY,CAACC,OAAO,CAACL,YAAY,CAAC,OAAO,CAAC,CAAC,CAC5C,CAAuB;AAU1B;AACA;AACA;AACA,SAASM,kBAAkBA,CAAA,EAAqB;EAC9C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAa,OAAO,CAAC;EACrE,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAa,OAAO,CAAC;EACzD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMiB,aAAa,GAAIC,MAAe,IAAK;IACzC,IAAIA,MAAM,EAAE;MACV,KAAKV,YAAY,CAACW,OAAO,CAACf,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;IACzD,CAAC,MAAM;MACL,KAAKI,YAAY,CAACW,OAAO,CAACf,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;IACzD;IAEAY,OAAO,CAACE,MAAM,CAAC;EACjB,CAAC;;EAED;EACA,MAAME,eAAe,GAAIP,MAAkB,IAAK;IAC9C,KAAKL,YAAY,CAACW,OAAO,CAACf,YAAY,CAAC,OAAO,CAAC,EAAES,MAAM,CAAC;IACxDC,SAAS,CAACD,MAAM,CAAC;EACnB,CAAC;;EAED;EACA,MAAMQ,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAM,CAACC,KAAK,EAAEC,UAAU,CAAC,GAAG,MAAMlB,iBAAiB,CAAC,CAAC;IAErD,IAAIiB,KAAK,KAAK,MAAM,EAAE;MACpB,IAAIC,UAAU,IAAIA,UAAU,KAAKV,MAAM,EAAEC,SAAS,CAACS,UAAU,CAAC;MAC9DP,OAAO,CAAC,KAAK,CAAC;IAChB;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd,MAAMyB,aAAa,GAAIC,KAA2B,IAAK;MACrD,MAAMC,cAAc,GAAGD,KAAK,CAACE,OAAO,GAAG,MAAM,GAAG,OAAO;MACvDf,eAAe,CAACc,cAAc,CAAC;IACjC,CAAC;IAED,KAAKL,iBAAiB,CAAC,CAAC;IAExBO,MAAM,CAACC,UAAU,CAAC1B,oBAAoB,CAAC,CAAC2B,gBAAgB,CAAC,QAAQ,EAAEN,aAAa,CAAC;IAEjF,MAAMX,MAAM,GAAGe,MAAM,CAACC,UAAU,CAAC1B,oBAAoB,CAAC,GAAG,MAAM,GAAG,OAAO;IACzES,eAAe,CAACC,MAAM,CAAC;IAEvB,OAAO,MAAM;MACXe,MAAM,CAACC,UAAU,CAAC1B,oBAAoB,CAAC,CAAC4B,mBAAmB,CAAC,QAAQ,EAAEP,aAAa,CAAC;IACtF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLX,MAAM,EAAEE,IAAI,GAAGJ,YAAY,GAAGE,MAAM;IACpCU,UAAU,EAAEV,MAAM;IAClBE,IAAI;IACJD,SAAS,EAAEM,eAAe;IAC1BJ,OAAO,EAAEC;EACX,CAAC;AACH;AAIA,MAAMe,aAAa,gBAAGnC,KAAK,CAACoC,aAAa,CAAqB;EAC5DC,MAAM,EAAE,IAAI;EACZrB,MAAM,EAAE;AACV,CAAC,CAAC;AASF,OAAO,SAASsB,cAAcA,CAAC;EAAEC,KAAK,GAAG,CAAC,CAAC;EAAEvB,MAAM,GAAG,EAAE;EAAEwB,YAAY,GAAG,CAAC,CAAC;EAAEC;AAA8B,CAAC,EAAE;EAC5G;EACA,MAAMC,WAAW,GAAG7B,kBAAkB,CAAC,CAAC;;EAExC;EACA,MAAMwB,MAAM,GAAGG,YAAY,CAACxB,MAAM,CAAC,IAAIwB,YAAY,CAACE,WAAW,CAAC1B,MAAM,CAAC,IAAIwB,YAAY,CAACG,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;EAErH,oBACExC,KAAA,CAAA6C,aAAA,CAACV,aAAa,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAE,GAAGL,WAAW;MAAEL;IAAO;EAAE,gBACxDrC,KAAA,CAAA6C,aAAA,CAACzC,aAAa;IAACmC,KAAK,EAAE;MAAE,GAAGA,KAAK;MAAEF;IAAO;EAAE,GAAEI,QAAwB,CAC/C,CAAC;AAE7B;AAEA,OAAO,MAAMO,gBAAgB,GAAGA,CAAA,KAA0B/C,UAAU,CAACkC,aAAa,CAAC"}