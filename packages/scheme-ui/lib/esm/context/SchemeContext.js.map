{"version":3,"sources":["../../../src/context/SchemeContext.tsx"],"names":["React","useContext","useEffect","useState","ThemeProvider","SCHEMES","PREFERS_COLOR_SCHEME","STORAGE_KEYS","getSchemeSettings","Promise","all","localStorage","getItem","useLightDarkScheme","systemScheme","setSystemScheme","scheme","setScheme","auto","setAuto","handleSetAuto","isAuto","setItem","handleSetScheme","getUserPreference","state","userScheme","updateSchemes","event","newColorScheme","matches","window","matchMedia","addEventListener","removeEventListener","SchemeContext","createContext","colors","SchemeProvider","theme","colorSchemes","children","colorScheme","Object","keys","useSchemeContext"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\n\ntype ColorsProps = {\n  [index: string]: string;\n};\n\ntype SchemeProps = {\n  [index: string]: ColorsProps;\n};\n\nconst SCHEMES = ['light', 'dark'] as const;\ntype SchemeType = typeof SCHEMES[number];\ntype StateType = 'auto' | 'user';\n\nconst PREFERS_COLOR_SCHEME = '(prefers-color-scheme: dark)';\n\nenum STORAGE_KEYS {\n  mode = 'settings:dark:mode',\n  value = 'settings:dark:value',\n}\n\ntype SchemeSettingsRes = [StateType | null, SchemeType | null];\nexport const getSchemeSettings = async (): Promise<SchemeSettingsRes> =>\n  (await Promise.all([\n    localStorage.getItem(STORAGE_KEYS['mode']),\n    localStorage.getItem(STORAGE_KEYS['value']),\n  ])) as SchemeSettingsRes;\n\nexport type ColorSchemeProps = {\n  scheme: SchemeType; // The current app scheme\n  userScheme: SchemeType; // The user's chosen scheme (may be different if 'auto' is true)\n  setScheme: (newScheme: SchemeType) => void;\n  auto: boolean;\n  setAuto: (newAuto: boolean) => void;\n};\n\n// The useLightDarkScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nfunction useLightDarkScheme(): ColorSchemeProps {\n  const [systemScheme, setSystemScheme] = useState<SchemeType>('light');\n  const [scheme, setScheme] = useState<SchemeType>('light');\n  const [auto, setAuto] = useState(true);\n\n  // Set whether we should be using the device scheme or user's scheme\n  const handleSetAuto = (isAuto: boolean) => {\n    if (isAuto) {\n      void localStorage.setItem(STORAGE_KEYS['mode'], 'auto');\n    } else {\n      void localStorage.setItem(STORAGE_KEYS['mode'], 'user');\n    }\n\n    setAuto(isAuto);\n  };\n\n  // Set the current scheme\n  const handleSetScheme = (scheme: SchemeType) => {\n    void localStorage.setItem(STORAGE_KEYS['value'], scheme);\n    setScheme(scheme);\n  };\n\n  // Get initial stored user preference\n  const getUserPreference = async () => {\n    const [state, userScheme] = await getSchemeSettings();\n\n    if (state === 'user') {\n      if (userScheme && userScheme !== scheme) setScheme(userScheme);\n      setAuto(false);\n    }\n  };\n\n  useEffect(() => {\n    const updateSchemes = (event: { matches: boolean }) => {\n      const newColorScheme = event.matches ? 'dark' : 'light';\n      setSystemScheme(newColorScheme);\n    };\n\n    void getUserPreference();\n\n    window.matchMedia(PREFERS_COLOR_SCHEME).addEventListener('change', updateSchemes);\n\n    const scheme = window.matchMedia(PREFERS_COLOR_SCHEME) ? 'dark' : 'light';\n    setSystemScheme(scheme);\n\n    return () => {\n      window.matchMedia(PREFERS_COLOR_SCHEME).removeEventListener('change', updateSchemes);\n    };\n  }, []);\n\n  return {\n    scheme: auto ? systemScheme : scheme,\n    userScheme: scheme,\n    auto,\n    setScheme: handleSetScheme,\n    setAuto: handleSetAuto,\n  };\n}\n\ntype SchemeContextProps = ColorSchemeProps & { colors: ColorsProps };\n\nconst SchemeContext = React.createContext<SchemeContextProps>({\n  colors: null,\n  scheme: 'light',\n});\n\nexport type SchemeProviderProps = {\n  colorSchemes?: SchemeProps;\n  theme?: { [index: string]: any };\n  scheme?: string;\n  children: React.ReactNode;\n};\n\nexport function SchemeProvider({ theme = {}, scheme = '', colorSchemes = {}, children }: SchemeProviderProps) {\n  // Get current light / dark scheme\n  const colorScheme = useLightDarkScheme();\n\n  // Use passed scheme if it exists, otherwise use light / dark, otherwise use first available scheme\n  const colors = colorSchemes[scheme] || colorSchemes[colorScheme.scheme] || colorSchemes[Object.keys(colorSchemes)[0]];\n\n  return (\n    <SchemeContext.Provider value={{ ...colorScheme, colors }}>\n      <ThemeProvider theme={{ ...theme, colors }}>{children}</ThemeProvider>\n    </SchemeContext.Provider>\n  );\n}\n\nexport const useSchemeContext = (): SchemeContextProps => useContext(SchemeContext);\n"],"file":"SchemeContext.js"}